/* 
 * Megaputer Text Mining API
 *
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TmApi.Client;
using TmApi.Model;

namespace TmApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create task
        /// </summary>
        /// <remarks>
        /// To create a task for performing several operations with text documents, specify required operations in the \&quot;operations\&quot; attribute in the request body. Tasks should be separated by a comma. The list of operations supported with the server could be retrieved via the request \&quot;server\&quot;.  Created tasks are available to users until they are deleted by the DELETE method or the server is restarted. After restarting the server it is not possible to get information, to delete, or to get the result of the created tasks. The tasks will cease to exist as if they were deleted by the DELETE method. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="documents">Documents to process</param>
        /// <param name="async">Asynchorous execution flag: * &#x60;0&#x60; - Block execution until result is ready (**default**) * &#x60;1&#x60; - Return GUID of newly created task and run task asynchronously  (optional)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Object</returns>
        Object CreateTask (List<string> operations, Documents documents, int? async = null, string positions = null);

        /// <summary>
        /// Create task
        /// </summary>
        /// <remarks>
        /// To create a task for performing several operations with text documents, specify required operations in the \&quot;operations\&quot; attribute in the request body. Tasks should be separated by a comma. The list of operations supported with the server could be retrieved via the request \&quot;server\&quot;.  Created tasks are available to users until they are deleted by the DELETE method or the server is restarted. After restarting the server it is not possible to get information, to delete, or to get the result of the created tasks. The tasks will cease to exist as if they were deleted by the DELETE method. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="documents">Documents to process</param>
        /// <param name="async">Asynchorous execution flag: * &#x60;0&#x60; - Block execution until result is ready (**default**) * &#x60;1&#x60; - Return GUID of newly created task and run task asynchronously  (optional)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateTaskWithHttpInfo (List<string> operations, Documents documents, int? async = null, string positions = null);
        /// <summary>
        /// Delete tasks
        /// </summary>
        /// <remarks>
        /// The operation allows to delete current user’s tasks specified in the ids parameter. Deleting tasks saves the server disk space. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>Object</returns>
        Object DeleteTasks (List<string> ids);

        /// <summary>
        /// Delete tasks
        /// </summary>
        /// <remarks>
        /// The operation allows to delete current user’s tasks specified in the ids parameter. Deleting tasks saves the server disk space. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteTasksWithHttpInfo (List<string> ids);
        /// <summary>
        /// Task result
        /// </summary>
        /// <remarks>
        /// The operation allows to get the result of the specified task. The task GUID and relevant operations are required.  Before getting results of the task execution, first ensure that the task is completed (the done paremeter is 100, the error parameter is empty). 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Task identifier</param>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Object</returns>
        Object GetTaskResult (string id, List<string> operations, string positions = null);

        /// <summary>
        /// Task result
        /// </summary>
        /// <remarks>
        /// The operation allows to get the result of the specified task. The task GUID and relevant operations are required.  Before getting results of the task execution, first ensure that the task is completed (the done paremeter is 100, the error parameter is empty). 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Task identifier</param>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetTaskResultWithHttpInfo (string id, List<string> operations, string positions = null);
        /// <summary>
        /// Tasks information
        /// </summary>
        /// <remarks>
        /// The operation allows to receive information about the specified tasks. A task unique identifier (GIUD) is required, which is returned when creating new asynchronous task. If the identifiers list is empty, the server will return information about all tasks of the current user. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>TaskInfo</returns>
        TaskInfo GetTasksInfo (List<string> ids);

        /// <summary>
        /// Tasks information
        /// </summary>
        /// <remarks>
        /// The operation allows to receive information about the specified tasks. A task unique identifier (GIUD) is required, which is returned when creating new asynchronous task. If the identifiers list is empty, the server will return information about all tasks of the current user. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> GetTasksInfoWithHttpInfo (List<string> ids);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create task
        /// </summary>
        /// <remarks>
        /// To create a task for performing several operations with text documents, specify required operations in the \&quot;operations\&quot; attribute in the request body. Tasks should be separated by a comma. The list of operations supported with the server could be retrieved via the request \&quot;server\&quot;.  Created tasks are available to users until they are deleted by the DELETE method or the server is restarted. After restarting the server it is not possible to get information, to delete, or to get the result of the created tasks. The tasks will cease to exist as if they were deleted by the DELETE method. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="documents">Documents to process</param>
        /// <param name="async">Asynchorous execution flag: * &#x60;0&#x60; - Block execution until result is ready (**default**) * &#x60;1&#x60; - Return GUID of newly created task and run task asynchronously  (optional)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateTaskAsync (List<string> operations, Documents documents, int? async = null, string positions = null);

        /// <summary>
        /// Create task
        /// </summary>
        /// <remarks>
        /// To create a task for performing several operations with text documents, specify required operations in the \&quot;operations\&quot; attribute in the request body. Tasks should be separated by a comma. The list of operations supported with the server could be retrieved via the request \&quot;server\&quot;.  Created tasks are available to users until they are deleted by the DELETE method or the server is restarted. After restarting the server it is not possible to get information, to delete, or to get the result of the created tasks. The tasks will cease to exist as if they were deleted by the DELETE method. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="documents">Documents to process</param>
        /// <param name="async">Asynchorous execution flag: * &#x60;0&#x60; - Block execution until result is ready (**default**) * &#x60;1&#x60; - Return GUID of newly created task and run task asynchronously  (optional)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateTaskAsyncWithHttpInfo (List<string> operations, Documents documents, int? async = null, string positions = null);
        /// <summary>
        /// Delete tasks
        /// </summary>
        /// <remarks>
        /// The operation allows to delete current user’s tasks specified in the ids parameter. Deleting tasks saves the server disk space. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteTasksAsync (List<string> ids);

        /// <summary>
        /// Delete tasks
        /// </summary>
        /// <remarks>
        /// The operation allows to delete current user’s tasks specified in the ids parameter. Deleting tasks saves the server disk space. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTasksAsyncWithHttpInfo (List<string> ids);
        /// <summary>
        /// Task result
        /// </summary>
        /// <remarks>
        /// The operation allows to get the result of the specified task. The task GUID and relevant operations are required.  Before getting results of the task execution, first ensure that the task is completed (the done paremeter is 100, the error parameter is empty). 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Task identifier</param>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetTaskResultAsync (string id, List<string> operations, string positions = null);

        /// <summary>
        /// Task result
        /// </summary>
        /// <remarks>
        /// The operation allows to get the result of the specified task. The task GUID and relevant operations are required.  Before getting results of the task execution, first ensure that the task is completed (the done paremeter is 100, the error parameter is empty). 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Task identifier</param>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetTaskResultAsyncWithHttpInfo (string id, List<string> operations, string positions = null);
        /// <summary>
        /// Tasks information
        /// </summary>
        /// <remarks>
        /// The operation allows to receive information about the specified tasks. A task unique identifier (GIUD) is required, which is returned when creating new asynchronous task. If the identifiers list is empty, the server will return information about all tasks of the current user. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> GetTasksInfoAsync (List<string> ids);

        /// <summary>
        /// Tasks information
        /// </summary>
        /// <remarks>
        /// The operation allows to receive information about the specified tasks. A task unique identifier (GIUD) is required, which is returned when creating new asynchronous task. If the identifiers list is empty, the server will return information about all tasks of the current user. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> GetTasksInfoAsyncWithHttpInfo (List<string> ids);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TasksApi : ITasksApi
    {
        private TmApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(String basePath)
        {
            this.Configuration = new TmApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// </summary>
        /// <returns></returns>
        public TasksApi()
        {
            this.Configuration = TmApi.Client.Configuration.Default;

            ExceptionFactory = TmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TasksApi(TmApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TmApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TmApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TmApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create task To create a task for performing several operations with text documents, specify required operations in the \&quot;operations\&quot; attribute in the request body. Tasks should be separated by a comma. The list of operations supported with the server could be retrieved via the request \&quot;server\&quot;.  Created tasks are available to users until they are deleted by the DELETE method or the server is restarted. After restarting the server it is not possible to get information, to delete, or to get the result of the created tasks. The tasks will cease to exist as if they were deleted by the DELETE method. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="documents">Documents to process</param>
        /// <param name="async">Asynchorous execution flag: * &#x60;0&#x60; - Block execution until result is ready (**default**) * &#x60;1&#x60; - Return GUID of newly created task and run task asynchronously  (optional)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Object</returns>
        public Object CreateTask (List<string> operations, Documents documents, int? async = null, string positions = null)
        {
             ApiResponse<Object> localVarResponse = CreateTaskWithHttpInfo(operations, documents, async, positions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create task To create a task for performing several operations with text documents, specify required operations in the \&quot;operations\&quot; attribute in the request body. Tasks should be separated by a comma. The list of operations supported with the server could be retrieved via the request \&quot;server\&quot;.  Created tasks are available to users until they are deleted by the DELETE method or the server is restarted. After restarting the server it is not possible to get information, to delete, or to get the result of the created tasks. The tasks will cease to exist as if they were deleted by the DELETE method. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="documents">Documents to process</param>
        /// <param name="async">Asynchorous execution flag: * &#x60;0&#x60; - Block execution until result is ready (**default**) * &#x60;1&#x60; - Return GUID of newly created task and run task asynchronously  (optional)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateTaskWithHttpInfo (List<string> operations, Documents documents, int? async = null, string positions = null)
        {
            // verify the required parameter 'operations' is set
            if (operations == null)
                throw new ApiException(400, "Missing required parameter 'operations' when calling TasksApi->CreateTask");
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling TasksApi->CreateTask");

            var localVarPath = "/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "operations", operations)); // query parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter
            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create task To create a task for performing several operations with text documents, specify required operations in the \&quot;operations\&quot; attribute in the request body. Tasks should be separated by a comma. The list of operations supported with the server could be retrieved via the request \&quot;server\&quot;.  Created tasks are available to users until they are deleted by the DELETE method or the server is restarted. After restarting the server it is not possible to get information, to delete, or to get the result of the created tasks. The tasks will cease to exist as if they were deleted by the DELETE method. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="documents">Documents to process</param>
        /// <param name="async">Asynchorous execution flag: * &#x60;0&#x60; - Block execution until result is ready (**default**) * &#x60;1&#x60; - Return GUID of newly created task and run task asynchronously  (optional)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateTaskAsync (List<string> operations, Documents documents, int? async = null, string positions = null)
        {
             ApiResponse<Object> localVarResponse = await CreateTaskAsyncWithHttpInfo(operations, documents, async, positions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create task To create a task for performing several operations with text documents, specify required operations in the \&quot;operations\&quot; attribute in the request body. Tasks should be separated by a comma. The list of operations supported with the server could be retrieved via the request \&quot;server\&quot;.  Created tasks are available to users until they are deleted by the DELETE method or the server is restarted. After restarting the server it is not possible to get information, to delete, or to get the result of the created tasks. The tasks will cease to exist as if they were deleted by the DELETE method. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="documents">Documents to process</param>
        /// <param name="async">Asynchorous execution flag: * &#x60;0&#x60; - Block execution until result is ready (**default**) * &#x60;1&#x60; - Return GUID of newly created task and run task asynchronously  (optional)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateTaskAsyncWithHttpInfo (List<string> operations, Documents documents, int? async = null, string positions = null)
        {
            // verify the required parameter 'operations' is set
            if (operations == null)
                throw new ApiException(400, "Missing required parameter 'operations' when calling TasksApi->CreateTask");
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling TasksApi->CreateTask");

            var localVarPath = "/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "operations", operations)); // query parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter
            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete tasks The operation allows to delete current user’s tasks specified in the ids parameter. Deleting tasks saves the server disk space. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>Object</returns>
        public Object DeleteTasks (List<string> ids)
        {
             ApiResponse<Object> localVarResponse = DeleteTasksWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete tasks The operation allows to delete current user’s tasks specified in the ids parameter. Deleting tasks saves the server disk space. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteTasksWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling TasksApi->DeleteTasks");

            var localVarPath = "/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete tasks The operation allows to delete current user’s tasks specified in the ids parameter. Deleting tasks saves the server disk space. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteTasksAsync (List<string> ids)
        {
             ApiResponse<Object> localVarResponse = await DeleteTasksAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete tasks The operation allows to delete current user’s tasks specified in the ids parameter. Deleting tasks saves the server disk space. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTasksAsyncWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling TasksApi->DeleteTasks");

            var localVarPath = "/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Task result The operation allows to get the result of the specified task. The task GUID and relevant operations are required.  Before getting results of the task execution, first ensure that the task is completed (the done paremeter is 100, the error parameter is empty). 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Task identifier</param>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Object</returns>
        public Object GetTaskResult (string id, List<string> operations, string positions = null)
        {
             ApiResponse<Object> localVarResponse = GetTaskResultWithHttpInfo(id, operations, positions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Task result The operation allows to get the result of the specified task. The task GUID and relevant operations are required.  Before getting results of the task execution, first ensure that the task is completed (the done paremeter is 100, the error parameter is empty). 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Task identifier</param>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetTaskResultWithHttpInfo (string id, List<string> operations, string positions = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetTaskResult");
            // verify the required parameter 'operations' is set
            if (operations == null)
                throw new ApiException(400, "Missing required parameter 'operations' when calling TasksApi->GetTaskResult");

            var localVarPath = "/tasks/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (operations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "operations", operations)); // query parameter
            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Task result The operation allows to get the result of the specified task. The task GUID and relevant operations are required.  Before getting results of the task execution, first ensure that the task is completed (the done paremeter is 100, the error parameter is empty). 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Task identifier</param>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetTaskResultAsync (string id, List<string> operations, string positions = null)
        {
             ApiResponse<Object> localVarResponse = await GetTaskResultAsyncWithHttpInfo(id, operations, positions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Task result The operation allows to get the result of the specified task. The task GUID and relevant operations are required.  Before getting results of the task execution, first ensure that the task is completed (the done paremeter is 100, the error parameter is empty). 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Task identifier</param>
        /// <param name="operations">List of operations (languages, tokens, keywords, entities, sentiments, facts)</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetTaskResultAsyncWithHttpInfo (string id, List<string> operations, string positions = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TasksApi->GetTaskResult");
            // verify the required parameter 'operations' is set
            if (operations == null)
                throw new ApiException(400, "Missing required parameter 'operations' when calling TasksApi->GetTaskResult");

            var localVarPath = "/tasks/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (operations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "operations", operations)); // query parameter
            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Tasks information The operation allows to receive information about the specified tasks. A task unique identifier (GIUD) is required, which is returned when creating new asynchronous task. If the identifiers list is empty, the server will return information about all tasks of the current user. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo GetTasksInfo (List<string> ids)
        {
             ApiResponse<TaskInfo> localVarResponse = GetTasksInfoWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tasks information The operation allows to receive information about the specified tasks. A task unique identifier (GIUD) is required, which is returned when creating new asynchronous task. If the identifiers list is empty, the server will return information about all tasks of the current user. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public ApiResponse< TaskInfo > GetTasksInfoWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling TasksApi->GetTasksInfo");

            var localVarPath = "/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasksInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskInfo)));
        }

        /// <summary>
        /// Tasks information The operation allows to receive information about the specified tasks. A task unique identifier (GIUD) is required, which is returned when creating new asynchronous task. If the identifiers list is empty, the server will return information about all tasks of the current user. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> GetTasksInfoAsync (List<string> ids)
        {
             ApiResponse<TaskInfo> localVarResponse = await GetTasksInfoAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tasks information The operation allows to receive information about the specified tasks. A task unique identifier (GIUD) is required, which is returned when creating new asynchronous task. If the identifiers list is empty, the server will return information about all tasks of the current user. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of task identifiers</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskInfo>> GetTasksInfoAsyncWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling TasksApi->GetTasksInfo");

            var localVarPath = "/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasksInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskInfo)));
        }

    }
}
