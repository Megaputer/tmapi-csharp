/* 
 * Megaputer Text Mining API
 *
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TmApi.Client;
using TmApi.Model;

namespace TmApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOperationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Entities extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts entities from each file.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>EntitiesResponse</returns>
        EntitiesResponse ExtractDocumentsEntities (Documents documents, string positions = null);

        /// <summary>
        /// Entities extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts entities from each file.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of EntitiesResponse</returns>
        ApiResponse<EntitiesResponse> ExtractDocumentsEntitiesWithHttpInfo (Documents documents, string positions = null);
        /// <summary>
        /// Facts extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts facts from each file. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.  
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>FactsResponse</returns>
        FactsResponse ExtractDocumentsFacts (Documents documents, string positions = null);

        /// <summary>
        /// Facts extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts facts from each file. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.  
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of FactsResponse</returns>
        ApiResponse<FactsResponse> ExtractDocumentsFactsWithHttpInfo (Documents documents, string positions = null);
        /// <summary>
        /// Keywords extraction
        /// </summary>
        /// <remarks>
        /// The operation explores often mentioned terms in each file. The response returns keywords and other statistics extracted from each file.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>KeywordsResponse</returns>
        KeywordsResponse ExtractDocumentsKeywords (Documents documents, string positions = null);

        /// <summary>
        /// Keywords extraction
        /// </summary>
        /// <remarks>
        /// The operation explores often mentioned terms in each file. The response returns keywords and other statistics extracted from each file.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of KeywordsResponse</returns>
        ApiResponse<KeywordsResponse> ExtractDocumentsKeywordsWithHttpInfo (Documents documents, string positions = null);
        /// <summary>
        /// Sentiments analysis
        /// </summary>
        /// <remarks>
        /// The operation extracts opinions and emotions related to something, identifies the subject, the object of evaluation and the evaluation itself in each file.  
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>SentimentsResponse</returns>
        SentimentsResponse ExtractDocumentsSentiments (Documents documents, string positions = null);

        /// <summary>
        /// Sentiments analysis
        /// </summary>
        /// <remarks>
        /// The operation extracts opinions and emotions related to something, identifies the subject, the object of evaluation and the evaluation itself in each file.  
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of SentimentsResponse</returns>
        ApiResponse<SentimentsResponse> ExtractDocumentsSentimentsWithHttpInfo (Documents documents, string positions = null);
        /// <summary>
        /// Text parsing
        /// </summary>
        /// <remarks>
        /// Parse text in each file. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>TokensResponse</returns>
        TokensResponse ExtractDocumentsTokens (Documents documents);

        /// <summary>
        /// Text parsing
        /// </summary>
        /// <remarks>
        /// Parse text in each file. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>ApiResponse of TokensResponse</returns>
        ApiResponse<TokensResponse> ExtractDocumentsTokensWithHttpInfo (Documents documents);
        /// <summary>
        /// Entities extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts entities from the text document. For example, an entity may represent a person’s name, a name of an organization, an e-mail address, a phone number, or a geographical location.  
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>EntitiesResponse</returns>
        EntitiesResponse ExtractEntities (string text, string positions = null);

        /// <summary>
        /// Entities extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts entities from the text document. For example, an entity may represent a person’s name, a name of an organization, an e-mail address, a phone number, or a geographical location.  
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of EntitiesResponse</returns>
        ApiResponse<EntitiesResponse> ExtractEntitiesWithHttpInfo (string text, string positions = null);
        /// <summary>
        /// Facts extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts facts from the text. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>FactsResponse</returns>
        FactsResponse ExtractFacts (string text, string positions = null);

        /// <summary>
        /// Facts extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts facts from the text. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of FactsResponse</returns>
        ApiResponse<FactsResponse> ExtractFactsWithHttpInfo (string text, string positions = null);
        /// <summary>
        /// Keywords extraction
        /// </summary>
        /// <remarks>
        /// The operation explores often mentioned terms in the text. The response returns keywords and other statistics extracted from the text.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>KeywordsResponse</returns>
        KeywordsResponse ExtractKeywords (string text, string positions = null);

        /// <summary>
        /// Keywords extraction
        /// </summary>
        /// <remarks>
        /// The operation explores often mentioned terms in the text. The response returns keywords and other statistics extracted from the text.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of KeywordsResponse</returns>
        ApiResponse<KeywordsResponse> ExtractKeywordsWithHttpInfo (string text, string positions = null);
        /// <summary>
        /// Sentiments analysis
        /// </summary>
        /// <remarks>
        /// Extract sentiments from document
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>SentimentsResponse</returns>
        SentimentsResponse ExtractSentiments (string text, string positions = null);

        /// <summary>
        /// Sentiments analysis
        /// </summary>
        /// <remarks>
        /// Extract sentiments from document
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of SentimentsResponse</returns>
        ApiResponse<SentimentsResponse> ExtractSentimentsWithHttpInfo (string text, string positions = null);
        /// <summary>
        /// Text parsing
        /// </summary>
        /// <remarks>
        /// Parse document text. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>TokensResponse</returns>
        TokensResponse ExtractTokens (string text);

        /// <summary>
        /// Text parsing
        /// </summary>
        /// <remarks>
        /// Parse document text. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>ApiResponse of TokensResponse</returns>
        ApiResponse<TokensResponse> ExtractTokensWithHttpInfo (string text);
        /// <summary>
        /// Language detection
        /// </summary>
        /// <remarks>
        /// Automatically determine the language of each file.  The text encoding format of source files with the .txt extension must be strictly UTF-8. Otherwise, requests will not be executed. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>LanguagesResponse</returns>
        LanguagesResponse GetDocumentsLanguages (Documents documents);

        /// <summary>
        /// Language detection
        /// </summary>
        /// <remarks>
        /// Automatically determine the language of each file.  The text encoding format of source files with the .txt extension must be strictly UTF-8. Otherwise, requests will not be executed. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>ApiResponse of LanguagesResponse</returns>
        ApiResponse<LanguagesResponse> GetDocumentsLanguagesWithHttpInfo (Documents documents);
        /// <summary>
        /// Language detection
        /// </summary>
        /// <remarks>
        /// Detect the language of text documents
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>LanguagesResponse</returns>
        LanguagesResponse GetLanguages (string text);

        /// <summary>
        /// Language detection
        /// </summary>
        /// <remarks>
        /// Detect the language of text documents
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>ApiResponse of LanguagesResponse</returns>
        ApiResponse<LanguagesResponse> GetLanguagesWithHttpInfo (string text);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Entities extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts entities from each file.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of EntitiesResponse</returns>
        System.Threading.Tasks.Task<EntitiesResponse> ExtractDocumentsEntitiesAsync (Documents documents, string positions = null);

        /// <summary>
        /// Entities extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts entities from each file.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (EntitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitiesResponse>> ExtractDocumentsEntitiesAsyncWithHttpInfo (Documents documents, string positions = null);
        /// <summary>
        /// Facts extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts facts from each file. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.  
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of FactsResponse</returns>
        System.Threading.Tasks.Task<FactsResponse> ExtractDocumentsFactsAsync (Documents documents, string positions = null);

        /// <summary>
        /// Facts extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts facts from each file. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.  
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (FactsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FactsResponse>> ExtractDocumentsFactsAsyncWithHttpInfo (Documents documents, string positions = null);
        /// <summary>
        /// Keywords extraction
        /// </summary>
        /// <remarks>
        /// The operation explores often mentioned terms in each file. The response returns keywords and other statistics extracted from each file.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of KeywordsResponse</returns>
        System.Threading.Tasks.Task<KeywordsResponse> ExtractDocumentsKeywordsAsync (Documents documents, string positions = null);

        /// <summary>
        /// Keywords extraction
        /// </summary>
        /// <remarks>
        /// The operation explores often mentioned terms in each file. The response returns keywords and other statistics extracted from each file.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (KeywordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeywordsResponse>> ExtractDocumentsKeywordsAsyncWithHttpInfo (Documents documents, string positions = null);
        /// <summary>
        /// Sentiments analysis
        /// </summary>
        /// <remarks>
        /// The operation extracts opinions and emotions related to something, identifies the subject, the object of evaluation and the evaluation itself in each file.  
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of SentimentsResponse</returns>
        System.Threading.Tasks.Task<SentimentsResponse> ExtractDocumentsSentimentsAsync (Documents documents, string positions = null);

        /// <summary>
        /// Sentiments analysis
        /// </summary>
        /// <remarks>
        /// The operation extracts opinions and emotions related to something, identifies the subject, the object of evaluation and the evaluation itself in each file.  
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (SentimentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentimentsResponse>> ExtractDocumentsSentimentsAsyncWithHttpInfo (Documents documents, string positions = null);
        /// <summary>
        /// Text parsing
        /// </summary>
        /// <remarks>
        /// Parse text in each file. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>Task of TokensResponse</returns>
        System.Threading.Tasks.Task<TokensResponse> ExtractDocumentsTokensAsync (Documents documents);

        /// <summary>
        /// Text parsing
        /// </summary>
        /// <remarks>
        /// Parse text in each file. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>Task of ApiResponse (TokensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokensResponse>> ExtractDocumentsTokensAsyncWithHttpInfo (Documents documents);
        /// <summary>
        /// Entities extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts entities from the text document. For example, an entity may represent a person’s name, a name of an organization, an e-mail address, a phone number, or a geographical location.  
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of EntitiesResponse</returns>
        System.Threading.Tasks.Task<EntitiesResponse> ExtractEntitiesAsync (string text, string positions = null);

        /// <summary>
        /// Entities extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts entities from the text document. For example, an entity may represent a person’s name, a name of an organization, an e-mail address, a phone number, or a geographical location.  
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (EntitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitiesResponse>> ExtractEntitiesAsyncWithHttpInfo (string text, string positions = null);
        /// <summary>
        /// Facts extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts facts from the text. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of FactsResponse</returns>
        System.Threading.Tasks.Task<FactsResponse> ExtractFactsAsync (string text, string positions = null);

        /// <summary>
        /// Facts extraction
        /// </summary>
        /// <remarks>
        /// The operation extracts facts from the text. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (FactsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FactsResponse>> ExtractFactsAsyncWithHttpInfo (string text, string positions = null);
        /// <summary>
        /// Keywords extraction
        /// </summary>
        /// <remarks>
        /// The operation explores often mentioned terms in the text. The response returns keywords and other statistics extracted from the text.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of KeywordsResponse</returns>
        System.Threading.Tasks.Task<KeywordsResponse> ExtractKeywordsAsync (string text, string positions = null);

        /// <summary>
        /// Keywords extraction
        /// </summary>
        /// <remarks>
        /// The operation explores often mentioned terms in the text. The response returns keywords and other statistics extracted from the text.
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (KeywordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeywordsResponse>> ExtractKeywordsAsyncWithHttpInfo (string text, string positions = null);
        /// <summary>
        /// Sentiments analysis
        /// </summary>
        /// <remarks>
        /// Extract sentiments from document
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of SentimentsResponse</returns>
        System.Threading.Tasks.Task<SentimentsResponse> ExtractSentimentsAsync (string text, string positions = null);

        /// <summary>
        /// Sentiments analysis
        /// </summary>
        /// <remarks>
        /// Extract sentiments from document
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (SentimentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentimentsResponse>> ExtractSentimentsAsyncWithHttpInfo (string text, string positions = null);
        /// <summary>
        /// Text parsing
        /// </summary>
        /// <remarks>
        /// Parse document text. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>Task of TokensResponse</returns>
        System.Threading.Tasks.Task<TokensResponse> ExtractTokensAsync (string text);

        /// <summary>
        /// Text parsing
        /// </summary>
        /// <remarks>
        /// Parse document text. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>Task of ApiResponse (TokensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokensResponse>> ExtractTokensAsyncWithHttpInfo (string text);
        /// <summary>
        /// Language detection
        /// </summary>
        /// <remarks>
        /// Automatically determine the language of each file.  The text encoding format of source files with the .txt extension must be strictly UTF-8. Otherwise, requests will not be executed. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>Task of LanguagesResponse</returns>
        System.Threading.Tasks.Task<LanguagesResponse> GetDocumentsLanguagesAsync (Documents documents);

        /// <summary>
        /// Language detection
        /// </summary>
        /// <remarks>
        /// Automatically determine the language of each file.  The text encoding format of source files with the .txt extension must be strictly UTF-8. Otherwise, requests will not be executed. 
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>Task of ApiResponse (LanguagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LanguagesResponse>> GetDocumentsLanguagesAsyncWithHttpInfo (Documents documents);
        /// <summary>
        /// Language detection
        /// </summary>
        /// <remarks>
        /// Detect the language of text documents
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>Task of LanguagesResponse</returns>
        System.Threading.Tasks.Task<LanguagesResponse> GetLanguagesAsync (string text);

        /// <summary>
        /// Language detection
        /// </summary>
        /// <remarks>
        /// Detect the language of text documents
        /// </remarks>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>Task of ApiResponse (LanguagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LanguagesResponse>> GetLanguagesAsyncWithHttpInfo (string text);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OperationsApi : IOperationsApi
    {
        private TmApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OperationsApi(String basePath)
        {
            this.Configuration = new TmApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OperationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public OperationsApi()
        {
            this.Configuration = TmApi.Client.Configuration.Default;

            ExceptionFactory = TmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OperationsApi(TmApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TmApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TmApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TmApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Entities extraction The operation extracts entities from each file.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>EntitiesResponse</returns>
        public EntitiesResponse ExtractDocumentsEntities (Documents documents, string positions = null)
        {
             ApiResponse<EntitiesResponse> localVarResponse = ExtractDocumentsEntitiesWithHttpInfo(documents, positions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Entities extraction The operation extracts entities from each file.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of EntitiesResponse</returns>
        public ApiResponse< EntitiesResponse > ExtractDocumentsEntitiesWithHttpInfo (Documents documents, string positions = null)
        {
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling OperationsApi->ExtractDocumentsEntities");

            var localVarPath = "/operations/entities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter
            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractDocumentsEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitiesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitiesResponse)));
        }

        /// <summary>
        /// Entities extraction The operation extracts entities from each file.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of EntitiesResponse</returns>
        public async System.Threading.Tasks.Task<EntitiesResponse> ExtractDocumentsEntitiesAsync (Documents documents, string positions = null)
        {
             ApiResponse<EntitiesResponse> localVarResponse = await ExtractDocumentsEntitiesAsyncWithHttpInfo(documents, positions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Entities extraction The operation extracts entities from each file.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (EntitiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntitiesResponse>> ExtractDocumentsEntitiesAsyncWithHttpInfo (Documents documents, string positions = null)
        {
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling OperationsApi->ExtractDocumentsEntities");

            var localVarPath = "/operations/entities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter
            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractDocumentsEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitiesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitiesResponse)));
        }

        /// <summary>
        /// Facts extraction The operation extracts facts from each file. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.  
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>FactsResponse</returns>
        public FactsResponse ExtractDocumentsFacts (Documents documents, string positions = null)
        {
             ApiResponse<FactsResponse> localVarResponse = ExtractDocumentsFactsWithHttpInfo(documents, positions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Facts extraction The operation extracts facts from each file. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.  
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of FactsResponse</returns>
        public ApiResponse< FactsResponse > ExtractDocumentsFactsWithHttpInfo (Documents documents, string positions = null)
        {
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling OperationsApi->ExtractDocumentsFacts");

            var localVarPath = "/operations/facts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter
            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractDocumentsFacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FactsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FactsResponse)));
        }

        /// <summary>
        /// Facts extraction The operation extracts facts from each file. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.  
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of FactsResponse</returns>
        public async System.Threading.Tasks.Task<FactsResponse> ExtractDocumentsFactsAsync (Documents documents, string positions = null)
        {
             ApiResponse<FactsResponse> localVarResponse = await ExtractDocumentsFactsAsyncWithHttpInfo(documents, positions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Facts extraction The operation extracts facts from each file. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.  
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (FactsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FactsResponse>> ExtractDocumentsFactsAsyncWithHttpInfo (Documents documents, string positions = null)
        {
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling OperationsApi->ExtractDocumentsFacts");

            var localVarPath = "/operations/facts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter
            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractDocumentsFacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FactsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FactsResponse)));
        }

        /// <summary>
        /// Keywords extraction The operation explores often mentioned terms in each file. The response returns keywords and other statistics extracted from each file.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>KeywordsResponse</returns>
        public KeywordsResponse ExtractDocumentsKeywords (Documents documents, string positions = null)
        {
             ApiResponse<KeywordsResponse> localVarResponse = ExtractDocumentsKeywordsWithHttpInfo(documents, positions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Keywords extraction The operation explores often mentioned terms in each file. The response returns keywords and other statistics extracted from each file.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of KeywordsResponse</returns>
        public ApiResponse< KeywordsResponse > ExtractDocumentsKeywordsWithHttpInfo (Documents documents, string positions = null)
        {
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling OperationsApi->ExtractDocumentsKeywords");

            var localVarPath = "/operations/keywords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter
            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractDocumentsKeywords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeywordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeywordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeywordsResponse)));
        }

        /// <summary>
        /// Keywords extraction The operation explores often mentioned terms in each file. The response returns keywords and other statistics extracted from each file.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of KeywordsResponse</returns>
        public async System.Threading.Tasks.Task<KeywordsResponse> ExtractDocumentsKeywordsAsync (Documents documents, string positions = null)
        {
             ApiResponse<KeywordsResponse> localVarResponse = await ExtractDocumentsKeywordsAsyncWithHttpInfo(documents, positions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Keywords extraction The operation explores often mentioned terms in each file. The response returns keywords and other statistics extracted from each file.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (KeywordsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeywordsResponse>> ExtractDocumentsKeywordsAsyncWithHttpInfo (Documents documents, string positions = null)
        {
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling OperationsApi->ExtractDocumentsKeywords");

            var localVarPath = "/operations/keywords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter
            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractDocumentsKeywords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeywordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeywordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeywordsResponse)));
        }

        /// <summary>
        /// Sentiments analysis The operation extracts opinions and emotions related to something, identifies the subject, the object of evaluation and the evaluation itself in each file.  
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>SentimentsResponse</returns>
        public SentimentsResponse ExtractDocumentsSentiments (Documents documents, string positions = null)
        {
             ApiResponse<SentimentsResponse> localVarResponse = ExtractDocumentsSentimentsWithHttpInfo(documents, positions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sentiments analysis The operation extracts opinions and emotions related to something, identifies the subject, the object of evaluation and the evaluation itself in each file.  
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of SentimentsResponse</returns>
        public ApiResponse< SentimentsResponse > ExtractDocumentsSentimentsWithHttpInfo (Documents documents, string positions = null)
        {
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling OperationsApi->ExtractDocumentsSentiments");

            var localVarPath = "/operations/sentiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter
            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractDocumentsSentiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SentimentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SentimentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SentimentsResponse)));
        }

        /// <summary>
        /// Sentiments analysis The operation extracts opinions and emotions related to something, identifies the subject, the object of evaluation and the evaluation itself in each file.  
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of SentimentsResponse</returns>
        public async System.Threading.Tasks.Task<SentimentsResponse> ExtractDocumentsSentimentsAsync (Documents documents, string positions = null)
        {
             ApiResponse<SentimentsResponse> localVarResponse = await ExtractDocumentsSentimentsAsyncWithHttpInfo(documents, positions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sentiments analysis The operation extracts opinions and emotions related to something, identifies the subject, the object of evaluation and the evaluation itself in each file.  
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (SentimentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SentimentsResponse>> ExtractDocumentsSentimentsAsyncWithHttpInfo (Documents documents, string positions = null)
        {
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling OperationsApi->ExtractDocumentsSentiments");

            var localVarPath = "/operations/sentiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter
            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractDocumentsSentiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SentimentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SentimentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SentimentsResponse)));
        }

        /// <summary>
        /// Text parsing Parse text in each file. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>TokensResponse</returns>
        public TokensResponse ExtractDocumentsTokens (Documents documents)
        {
             ApiResponse<TokensResponse> localVarResponse = ExtractDocumentsTokensWithHttpInfo(documents);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Text parsing Parse text in each file. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>ApiResponse of TokensResponse</returns>
        public ApiResponse< TokensResponse > ExtractDocumentsTokensWithHttpInfo (Documents documents)
        {
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling OperationsApi->ExtractDocumentsTokens");

            var localVarPath = "/operations/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractDocumentsTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokensResponse)));
        }

        /// <summary>
        /// Text parsing Parse text in each file. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>Task of TokensResponse</returns>
        public async System.Threading.Tasks.Task<TokensResponse> ExtractDocumentsTokensAsync (Documents documents)
        {
             ApiResponse<TokensResponse> localVarResponse = await ExtractDocumentsTokensAsyncWithHttpInfo(documents);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Text parsing Parse text in each file. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>Task of ApiResponse (TokensResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokensResponse>> ExtractDocumentsTokensAsyncWithHttpInfo (Documents documents)
        {
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling OperationsApi->ExtractDocumentsTokens");

            var localVarPath = "/operations/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractDocumentsTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokensResponse)));
        }

        /// <summary>
        /// Entities extraction The operation extracts entities from the text document. For example, an entity may represent a person’s name, a name of an organization, an e-mail address, a phone number, or a geographical location.  
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>EntitiesResponse</returns>
        public EntitiesResponse ExtractEntities (string text, string positions = null)
        {
             ApiResponse<EntitiesResponse> localVarResponse = ExtractEntitiesWithHttpInfo(text, positions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Entities extraction The operation extracts entities from the text document. For example, an entity may represent a person’s name, a name of an organization, an e-mail address, a phone number, or a geographical location.  
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of EntitiesResponse</returns>
        public ApiResponse< EntitiesResponse > ExtractEntitiesWithHttpInfo (string text, string positions = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling OperationsApi->ExtractEntities");

            var localVarPath = "/operations/entities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitiesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitiesResponse)));
        }

        /// <summary>
        /// Entities extraction The operation extracts entities from the text document. For example, an entity may represent a person’s name, a name of an organization, an e-mail address, a phone number, or a geographical location.  
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of EntitiesResponse</returns>
        public async System.Threading.Tasks.Task<EntitiesResponse> ExtractEntitiesAsync (string text, string positions = null)
        {
             ApiResponse<EntitiesResponse> localVarResponse = await ExtractEntitiesAsyncWithHttpInfo(text, positions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Entities extraction The operation extracts entities from the text document. For example, an entity may represent a person’s name, a name of an organization, an e-mail address, a phone number, or a geographical location.  
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (EntitiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntitiesResponse>> ExtractEntitiesAsyncWithHttpInfo (string text, string positions = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling OperationsApi->ExtractEntities");

            var localVarPath = "/operations/entities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitiesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitiesResponse)));
        }

        /// <summary>
        /// Facts extraction The operation extracts facts from the text. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>FactsResponse</returns>
        public FactsResponse ExtractFacts (string text, string positions = null)
        {
             ApiResponse<FactsResponse> localVarResponse = ExtractFactsWithHttpInfo(text, positions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Facts extraction The operation extracts facts from the text. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of FactsResponse</returns>
        public ApiResponse< FactsResponse > ExtractFactsWithHttpInfo (string text, string positions = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling OperationsApi->ExtractFacts");

            var localVarPath = "/operations/facts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractFacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FactsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FactsResponse)));
        }

        /// <summary>
        /// Facts extraction The operation extracts facts from the text. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of FactsResponse</returns>
        public async System.Threading.Tasks.Task<FactsResponse> ExtractFactsAsync (string text, string positions = null)
        {
             ApiResponse<FactsResponse> localVarResponse = await ExtractFactsAsyncWithHttpInfo(text, positions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Facts extraction The operation extracts facts from the text. The term \&quot;fact\&quot; is used to denote phenomena, events, notions and relations between them which may be of interest to users.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (FactsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FactsResponse>> ExtractFactsAsyncWithHttpInfo (string text, string positions = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling OperationsApi->ExtractFacts");

            var localVarPath = "/operations/facts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractFacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FactsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FactsResponse)));
        }

        /// <summary>
        /// Keywords extraction The operation explores often mentioned terms in the text. The response returns keywords and other statistics extracted from the text.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>KeywordsResponse</returns>
        public KeywordsResponse ExtractKeywords (string text, string positions = null)
        {
             ApiResponse<KeywordsResponse> localVarResponse = ExtractKeywordsWithHttpInfo(text, positions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Keywords extraction The operation explores often mentioned terms in the text. The response returns keywords and other statistics extracted from the text.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of KeywordsResponse</returns>
        public ApiResponse< KeywordsResponse > ExtractKeywordsWithHttpInfo (string text, string positions = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling OperationsApi->ExtractKeywords");

            var localVarPath = "/operations/keywords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractKeywords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeywordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeywordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeywordsResponse)));
        }

        /// <summary>
        /// Keywords extraction The operation explores often mentioned terms in the text. The response returns keywords and other statistics extracted from the text.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of KeywordsResponse</returns>
        public async System.Threading.Tasks.Task<KeywordsResponse> ExtractKeywordsAsync (string text, string positions = null)
        {
             ApiResponse<KeywordsResponse> localVarResponse = await ExtractKeywordsAsyncWithHttpInfo(text, positions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Keywords extraction The operation explores often mentioned terms in the text. The response returns keywords and other statistics extracted from the text.
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (KeywordsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeywordsResponse>> ExtractKeywordsAsyncWithHttpInfo (string text, string positions = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling OperationsApi->ExtractKeywords");

            var localVarPath = "/operations/keywords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractKeywords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeywordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeywordsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeywordsResponse)));
        }

        /// <summary>
        /// Sentiments analysis Extract sentiments from document
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>SentimentsResponse</returns>
        public SentimentsResponse ExtractSentiments (string text, string positions = null)
        {
             ApiResponse<SentimentsResponse> localVarResponse = ExtractSentimentsWithHttpInfo(text, positions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sentiments analysis Extract sentiments from document
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>ApiResponse of SentimentsResponse</returns>
        public ApiResponse< SentimentsResponse > ExtractSentimentsWithHttpInfo (string text, string positions = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling OperationsApi->ExtractSentiments");

            var localVarPath = "/operations/sentiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractSentiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SentimentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SentimentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SentimentsResponse)));
        }

        /// <summary>
        /// Sentiments analysis Extract sentiments from document
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of SentimentsResponse</returns>
        public async System.Threading.Tasks.Task<SentimentsResponse> ExtractSentimentsAsync (string text, string positions = null)
        {
             ApiResponse<SentimentsResponse> localVarResponse = await ExtractSentimentsAsyncWithHttpInfo(text, positions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sentiments analysis Extract sentiments from document
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <param name="positions">Positions format to be returned from server: - &#x60;none&#x60; - Don&#39;t return positions (**default**) - &#x60;symbol&#x60; - Symbol positions - &#x60;token&#x60; - Token positions  (optional)</param>
        /// <returns>Task of ApiResponse (SentimentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SentimentsResponse>> ExtractSentimentsAsyncWithHttpInfo (string text, string positions = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling OperationsApi->ExtractSentiments");

            var localVarPath = "/operations/sentiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (positions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "positions", positions)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractSentiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SentimentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SentimentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SentimentsResponse)));
        }

        /// <summary>
        /// Text parsing Parse document text. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>TokensResponse</returns>
        public TokensResponse ExtractTokens (string text)
        {
             ApiResponse<TokensResponse> localVarResponse = ExtractTokensWithHttpInfo(text);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Text parsing Parse document text. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>ApiResponse of TokensResponse</returns>
        public ApiResponse< TokensResponse > ExtractTokensWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling OperationsApi->ExtractTokens");

            var localVarPath = "/operations/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokensResponse)));
        }

        /// <summary>
        /// Text parsing Parse document text. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>Task of TokensResponse</returns>
        public async System.Threading.Tasks.Task<TokensResponse> ExtractTokensAsync (string text)
        {
             ApiResponse<TokensResponse> localVarResponse = await ExtractTokensAsyncWithHttpInfo(text);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Text parsing Parse document text. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>Task of ApiResponse (TokensResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokensResponse>> ExtractTokensAsyncWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling OperationsApi->ExtractTokens");

            var localVarPath = "/operations/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokensResponse)));
        }

        /// <summary>
        /// Language detection Automatically determine the language of each file.  The text encoding format of source files with the .txt extension must be strictly UTF-8. Otherwise, requests will not be executed. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>LanguagesResponse</returns>
        public LanguagesResponse GetDocumentsLanguages (Documents documents)
        {
             ApiResponse<LanguagesResponse> localVarResponse = GetDocumentsLanguagesWithHttpInfo(documents);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Language detection Automatically determine the language of each file.  The text encoding format of source files with the .txt extension must be strictly UTF-8. Otherwise, requests will not be executed. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>ApiResponse of LanguagesResponse</returns>
        public ApiResponse< LanguagesResponse > GetDocumentsLanguagesWithHttpInfo (Documents documents)
        {
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling OperationsApi->GetDocumentsLanguages");

            var localVarPath = "/operations/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentsLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LanguagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguagesResponse)));
        }

        /// <summary>
        /// Language detection Automatically determine the language of each file.  The text encoding format of source files with the .txt extension must be strictly UTF-8. Otherwise, requests will not be executed. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>Task of LanguagesResponse</returns>
        public async System.Threading.Tasks.Task<LanguagesResponse> GetDocumentsLanguagesAsync (Documents documents)
        {
             ApiResponse<LanguagesResponse> localVarResponse = await GetDocumentsLanguagesAsyncWithHttpInfo(documents);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Language detection Automatically determine the language of each file.  The text encoding format of source files with the .txt extension must be strictly UTF-8. Otherwise, requests will not be executed. 
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documents">Documents to process</param>
        /// <returns>Task of ApiResponse (LanguagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LanguagesResponse>> GetDocumentsLanguagesAsyncWithHttpInfo (Documents documents)
        {
            // verify the required parameter 'documents' is set
            if (documents == null)
                throw new ApiException(400, "Missing required parameter 'documents' when calling OperationsApi->GetDocumentsLanguages");

            var localVarPath = "/operations/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documents != null && documents.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documents; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentsLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LanguagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguagesResponse)));
        }

        /// <summary>
        /// Language detection Detect the language of text documents
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>LanguagesResponse</returns>
        public LanguagesResponse GetLanguages (string text)
        {
             ApiResponse<LanguagesResponse> localVarResponse = GetLanguagesWithHttpInfo(text);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Language detection Detect the language of text documents
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>ApiResponse of LanguagesResponse</returns>
        public ApiResponse< LanguagesResponse > GetLanguagesWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling OperationsApi->GetLanguages");

            var localVarPath = "/operations/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LanguagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguagesResponse)));
        }

        /// <summary>
        /// Language detection Detect the language of text documents
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>Task of LanguagesResponse</returns>
        public async System.Threading.Tasks.Task<LanguagesResponse> GetLanguagesAsync (string text)
        {
             ApiResponse<LanguagesResponse> localVarResponse = await GetLanguagesAsyncWithHttpInfo(text);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Language detection Detect the language of text documents
        /// </summary>
        /// <exception cref="TmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Document text to process</param>
        /// <returns>Task of ApiResponse (LanguagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LanguagesResponse>> GetLanguagesAsyncWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling OperationsApi->GetLanguages");

            var localVarPath = "/operations/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LanguagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LanguagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LanguagesResponse)));
        }

    }
}
