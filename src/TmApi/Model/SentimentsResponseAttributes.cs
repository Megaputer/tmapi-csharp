/* 
 * Megaputer Text Mining API
 *
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TmApi.Client.OpenAPIDateConverter;

namespace TmApi.Model
{
    /// <summary>
    /// Sentiment attributes. Depends on sentiment type
    /// </summary>
    [DataContract]
    public partial class SentimentsResponseAttributes :  IEquatable<SentimentsResponseAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SentimentsResponseAttributes" /> class.
        /// </summary>
        /// <param name="subject">Either the speaker himself or another person (a group of people) whose opinion is shared. The subject of evaluation is not always mentioned in a text, especially when we deal with informal texts, such as forums, blogs and social network posts. .</param>
        /// <param name="evaluation">Implies the emotional judgment of a subject to some topic, an emotional reaction to something or the overall emotional tone of an utterance. Evaluation expresses an attitude of a subjeсt to a particular object, emotional response to something. .</param>
        /// <param name="_object">It is something which is evaluated. Similar to the subject of evaluation, objects may not always be mentioned..</param>
        /// <param name="headObject">The main words in a phrase..</param>
        /// <param name="degree">It is used to refer to the degree of positive evaluation ranging from 1 to 5 (1-rather positivem 5 - extremely positive) and negative evaluation ranging from -1 to -5 (-1 rather negative, - 5 - extremely negative). .</param>
        /// <param name="aspect">It is a word or phrase that defines what characteristic of the object is evaluated. It allows users to summarize different ways of expressing the same entity in one thematic section. .</param>
        /// <param name="confidence">It represents measure of how sure TM API Server in its conclusion. Confidence is measured on scale of 0.0 to 1.0..</param>
        public SentimentsResponseAttributes(string subject = default(string), string evaluation = default(string), string _object = default(string), string headObject = default(string), int? degree = default(int?), string aspect = default(string), decimal? confidence = default(decimal?))
        {
            this.Subject = subject;
            this.Evaluation = evaluation;
            this.Object = _object;
            this.HeadObject = headObject;
            this.Degree = degree;
            this.Aspect = aspect;
            this.Confidence = confidence;
        }
        
        /// <summary>
        /// Either the speaker himself or another person (a group of people) whose opinion is shared. The subject of evaluation is not always mentioned in a text, especially when we deal with informal texts, such as forums, blogs and social network posts. 
        /// </summary>
        /// <value>Either the speaker himself or another person (a group of people) whose opinion is shared. The subject of evaluation is not always mentioned in a text, especially when we deal with informal texts, such as forums, blogs and social network posts. </value>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Implies the emotional judgment of a subject to some topic, an emotional reaction to something or the overall emotional tone of an utterance. Evaluation expresses an attitude of a subjeсt to a particular object, emotional response to something. 
        /// </summary>
        /// <value>Implies the emotional judgment of a subject to some topic, an emotional reaction to something or the overall emotional tone of an utterance. Evaluation expresses an attitude of a subjeсt to a particular object, emotional response to something. </value>
        [DataMember(Name="Evaluation", EmitDefaultValue=false)]
        public string Evaluation { get; set; }

        /// <summary>
        /// It is something which is evaluated. Similar to the subject of evaluation, objects may not always be mentioned.
        /// </summary>
        /// <value>It is something which is evaluated. Similar to the subject of evaluation, objects may not always be mentioned.</value>
        [DataMember(Name="Object", EmitDefaultValue=false)]
        public string Object { get; set; }

        /// <summary>
        /// The main words in a phrase.
        /// </summary>
        /// <value>The main words in a phrase.</value>
        [DataMember(Name="HeadObject", EmitDefaultValue=false)]
        public string HeadObject { get; set; }

        /// <summary>
        /// It is used to refer to the degree of positive evaluation ranging from 1 to 5 (1-rather positivem 5 - extremely positive) and negative evaluation ranging from -1 to -5 (-1 rather negative, - 5 - extremely negative). 
        /// </summary>
        /// <value>It is used to refer to the degree of positive evaluation ranging from 1 to 5 (1-rather positivem 5 - extremely positive) and negative evaluation ranging from -1 to -5 (-1 rather negative, - 5 - extremely negative). </value>
        [DataMember(Name="Degree", EmitDefaultValue=false)]
        public int? Degree { get; set; }

        /// <summary>
        /// It is a word or phrase that defines what characteristic of the object is evaluated. It allows users to summarize different ways of expressing the same entity in one thematic section. 
        /// </summary>
        /// <value>It is a word or phrase that defines what characteristic of the object is evaluated. It allows users to summarize different ways of expressing the same entity in one thematic section. </value>
        [DataMember(Name="Aspect", EmitDefaultValue=false)]
        public string Aspect { get; set; }

        /// <summary>
        /// It represents measure of how sure TM API Server in its conclusion. Confidence is measured on scale of 0.0 to 1.0.
        /// </summary>
        /// <value>It represents measure of how sure TM API Server in its conclusion. Confidence is measured on scale of 0.0 to 1.0.</value>
        [DataMember(Name="Confidence", EmitDefaultValue=false)]
        public decimal? Confidence { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SentimentsResponseAttributes {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Evaluation: ").Append(Evaluation).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  HeadObject: ").Append(HeadObject).Append("\n");
            sb.Append("  Degree: ").Append(Degree).Append("\n");
            sb.Append("  Aspect: ").Append(Aspect).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SentimentsResponseAttributes);
        }

        /// <summary>
        /// Returns true if SentimentsResponseAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of SentimentsResponseAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SentimentsResponseAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Evaluation == input.Evaluation ||
                    (this.Evaluation != null &&
                    this.Evaluation.Equals(input.Evaluation))
                ) && 
                (
                    this.Object == input.Object ||
                    (this.Object != null &&
                    this.Object.Equals(input.Object))
                ) && 
                (
                    this.HeadObject == input.HeadObject ||
                    (this.HeadObject != null &&
                    this.HeadObject.Equals(input.HeadObject))
                ) && 
                (
                    this.Degree == input.Degree ||
                    (this.Degree != null &&
                    this.Degree.Equals(input.Degree))
                ) && 
                (
                    this.Aspect == input.Aspect ||
                    (this.Aspect != null &&
                    this.Aspect.Equals(input.Aspect))
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    (this.Confidence != null &&
                    this.Confidence.Equals(input.Confidence))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Evaluation != null)
                    hashCode = hashCode * 59 + this.Evaluation.GetHashCode();
                if (this.Object != null)
                    hashCode = hashCode * 59 + this.Object.GetHashCode();
                if (this.HeadObject != null)
                    hashCode = hashCode * 59 + this.HeadObject.GetHashCode();
                if (this.Degree != null)
                    hashCode = hashCode * 59 + this.Degree.GetHashCode();
                if (this.Aspect != null)
                    hashCode = hashCode * 59 + this.Aspect.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Degree (int?) maximum
            if(this.Degree > (int?)5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Degree, must be a value less than or equal to 5.", new [] { "Degree" });
            }

            // Degree (int?) minimum
            if(this.Degree < (int?)-5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Degree, must be a value greater than or equal to -5.", new [] { "Degree" });
            }

            // Confidence (decimal?) maximum
            if(this.Confidence > (decimal?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Confidence, must be a value less than or equal to 1.", new [] { "Confidence" });
            }

            // Confidence (decimal?) minimum
            if(this.Confidence < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Confidence, must be a value greater than or equal to 0.", new [] { "Confidence" });
            }

            yield break;
        }
    }

}
