/* 
 * Megaputer Text Mining API
 *
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TmApi.Client.OpenAPIDateConverter;

namespace TmApi.Model
{
    /// <summary>
    /// TotalLimitPeriodic2Response
    /// </summary>
    [DataContract]
    public partial class TotalLimitPeriodic2Response :  IEquatable<TotalLimitPeriodic2Response>, IValidatableObject
    {
        /// <summary>
        /// A period when limitations apply
        /// </summary>
        /// <value>A period when limitations apply</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NTUPeriod2Enum
        {
            /// <summary>
            /// Enum Second for value: Second
            /// </summary>
            [EnumMember(Value = "Second")]
            Second = 1,

            /// <summary>
            /// Enum Minute for value: Minute
            /// </summary>
            [EnumMember(Value = "Minute")]
            Minute = 2,

            /// <summary>
            /// Enum Hour for value: Hour
            /// </summary>
            [EnumMember(Value = "Hour")]
            Hour = 3,

            /// <summary>
            /// Enum Day for value: Day
            /// </summary>
            [EnumMember(Value = "Day")]
            Day = 4,

            /// <summary>
            /// Enum Month for value: Month
            /// </summary>
            [EnumMember(Value = "Month")]
            Month = 5

        }

        /// <summary>
        /// A period when limitations apply
        /// </summary>
        /// <value>A period when limitations apply</value>
        [DataMember(Name="NTUPeriod2", EmitDefaultValue=false)]
        public NTUPeriod2Enum? NTUPeriod2 { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TotalLimitPeriodic2Response" /> class.
        /// </summary>
        /// <param name="nTUPeriod2">A period when limitations apply.</param>
        /// <param name="nTUInPeriod2Limit">A maximum number of requests in the specified period.</param>
        /// <param name="nTUInPeriod2">A number of requests that have already been processed.</param>
        public TotalLimitPeriodic2Response(NTUPeriod2Enum? nTUPeriod2 = default(NTUPeriod2Enum?), int? nTUInPeriod2Limit = default(int?), int? nTUInPeriod2 = default(int?))
        {
            this.NTUPeriod2 = nTUPeriod2;
            this.NTUInPeriod2Limit = nTUInPeriod2Limit;
            this.NTUInPeriod2 = nTUInPeriod2;
        }
        

        /// <summary>
        /// A maximum number of requests in the specified period
        /// </summary>
        /// <value>A maximum number of requests in the specified period</value>
        [DataMember(Name="NTUInPeriod2Limit", EmitDefaultValue=false)]
        public int? NTUInPeriod2Limit { get; set; }

        /// <summary>
        /// A number of requests that have already been processed
        /// </summary>
        /// <value>A number of requests that have already been processed</value>
        [DataMember(Name="NTUInPeriod2", EmitDefaultValue=false)]
        public int? NTUInPeriod2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TotalLimitPeriodic2Response {\n");
            sb.Append("  NTUPeriod2: ").Append(NTUPeriod2).Append("\n");
            sb.Append("  NTUInPeriod2Limit: ").Append(NTUInPeriod2Limit).Append("\n");
            sb.Append("  NTUInPeriod2: ").Append(NTUInPeriod2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TotalLimitPeriodic2Response);
        }

        /// <summary>
        /// Returns true if TotalLimitPeriodic2Response instances are equal
        /// </summary>
        /// <param name="input">Instance of TotalLimitPeriodic2Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TotalLimitPeriodic2Response input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NTUPeriod2 == input.NTUPeriod2 ||
                    (this.NTUPeriod2 != null &&
                    this.NTUPeriod2.Equals(input.NTUPeriod2))
                ) && 
                (
                    this.NTUInPeriod2Limit == input.NTUInPeriod2Limit ||
                    (this.NTUInPeriod2Limit != null &&
                    this.NTUInPeriod2Limit.Equals(input.NTUInPeriod2Limit))
                ) && 
                (
                    this.NTUInPeriod2 == input.NTUInPeriod2 ||
                    (this.NTUInPeriod2 != null &&
                    this.NTUInPeriod2.Equals(input.NTUInPeriod2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NTUPeriod2 != null)
                    hashCode = hashCode * 59 + this.NTUPeriod2.GetHashCode();
                if (this.NTUInPeriod2Limit != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod2Limit.GetHashCode();
                if (this.NTUInPeriod2 != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod2.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
