/* 
 * Megaputer Text Mining API
 *
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TmApi.Client.OpenAPIDateConverter;

namespace TmApi.Model
{
    /// <summary>
    /// KeywordsResponseKeywords
    /// </summary>
    [DataContract]
    public partial class KeywordsResponseKeywords :  IEquatable<KeywordsResponseKeywords>, IValidatableObject
    {
        /// <summary>
        /// Part of speech of the keyword
        /// </summary>
        /// <value>Part of speech of the keyword</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PartOfSpeechEnum
        {
            /// <summary>
            /// Enum Noun for value: Noun
            /// </summary>
            [EnumMember(Value = "Noun")]
            Noun = 1,

            /// <summary>
            /// Enum Verb for value: Verb
            /// </summary>
            [EnumMember(Value = "Verb")]
            Verb = 2,

            /// <summary>
            /// Enum Adverb for value: Adverb
            /// </summary>
            [EnumMember(Value = "Adverb")]
            Adverb = 3,

            /// <summary>
            /// Enum Adjective for value: Adjective
            /// </summary>
            [EnumMember(Value = "Adjective")]
            Adjective = 4

        }

        /// <summary>
        /// Part of speech of the keyword
        /// </summary>
        /// <value>Part of speech of the keyword</value>
        [DataMember(Name="partOfSpeech", EmitDefaultValue=false)]
        public PartOfSpeechEnum? PartOfSpeech { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KeywordsResponseKeywords" /> class.
        /// </summary>
        /// <param name="keyword">Normalized keyword.</param>
        /// <param name="negated">Indicates negation in the semantics of the word and returns the boolean values.</param>
        /// <param name="partOfSpeech">Part of speech of the keyword.</param>
        /// <param name="significance">How distinct a particular keyword is for the explored text. Significance is calculated on a scale of 0,00 to 100,00. The greater the significance, the greater the chance that the concepts in the investigated data revolve around such a word. .</param>
        /// <param name="support">The number of different records containing the keyword.</param>
        /// <param name="frequency">The number of times the keyword appears in the data.</param>
        /// <param name="positions">Keyword positions in text.</param>
        public KeywordsResponseKeywords(string keyword = default(string), bool? negated = default(bool?), PartOfSpeechEnum? partOfSpeech = default(PartOfSpeechEnum?), decimal? significance = default(decimal?), int? support = default(int?), int? frequency = default(int?), List<KeywordsResponsePositions> positions = default(List<KeywordsResponsePositions>))
        {
            this.Keyword = keyword;
            this.Negated = negated;
            this.PartOfSpeech = partOfSpeech;
            this.Significance = significance;
            this.Support = support;
            this.Frequency = frequency;
            this.Positions = positions;
        }
        
        /// <summary>
        /// Normalized keyword
        /// </summary>
        /// <value>Normalized keyword</value>
        [DataMember(Name="keyword", EmitDefaultValue=false)]
        public string Keyword { get; set; }

        /// <summary>
        /// Indicates negation in the semantics of the word and returns the boolean values
        /// </summary>
        /// <value>Indicates negation in the semantics of the word and returns the boolean values</value>
        [DataMember(Name="negated", EmitDefaultValue=false)]
        public bool? Negated { get; set; }


        /// <summary>
        /// How distinct a particular keyword is for the explored text. Significance is calculated on a scale of 0,00 to 100,00. The greater the significance, the greater the chance that the concepts in the investigated data revolve around such a word. 
        /// </summary>
        /// <value>How distinct a particular keyword is for the explored text. Significance is calculated on a scale of 0,00 to 100,00. The greater the significance, the greater the chance that the concepts in the investigated data revolve around such a word. </value>
        [DataMember(Name="significance", EmitDefaultValue=false)]
        public decimal? Significance { get; set; }

        /// <summary>
        /// The number of different records containing the keyword
        /// </summary>
        /// <value>The number of different records containing the keyword</value>
        [DataMember(Name="support", EmitDefaultValue=false)]
        public int? Support { get; set; }

        /// <summary>
        /// The number of times the keyword appears in the data
        /// </summary>
        /// <value>The number of times the keyword appears in the data</value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public int? Frequency { get; set; }

        /// <summary>
        /// Keyword positions in text
        /// </summary>
        /// <value>Keyword positions in text</value>
        [DataMember(Name="positions", EmitDefaultValue=false)]
        public List<KeywordsResponsePositions> Positions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeywordsResponseKeywords {\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  Negated: ").Append(Negated).Append("\n");
            sb.Append("  PartOfSpeech: ").Append(PartOfSpeech).Append("\n");
            sb.Append("  Significance: ").Append(Significance).Append("\n");
            sb.Append("  Support: ").Append(Support).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KeywordsResponseKeywords);
        }

        /// <summary>
        /// Returns true if KeywordsResponseKeywords instances are equal
        /// </summary>
        /// <param name="input">Instance of KeywordsResponseKeywords to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeywordsResponseKeywords input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Keyword == input.Keyword ||
                    (this.Keyword != null &&
                    this.Keyword.Equals(input.Keyword))
                ) && 
                (
                    this.Negated == input.Negated ||
                    (this.Negated != null &&
                    this.Negated.Equals(input.Negated))
                ) && 
                (
                    this.PartOfSpeech == input.PartOfSpeech ||
                    (this.PartOfSpeech != null &&
                    this.PartOfSpeech.Equals(input.PartOfSpeech))
                ) && 
                (
                    this.Significance == input.Significance ||
                    (this.Significance != null &&
                    this.Significance.Equals(input.Significance))
                ) && 
                (
                    this.Support == input.Support ||
                    (this.Support != null &&
                    this.Support.Equals(input.Support))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.Positions == input.Positions ||
                    this.Positions != null &&
                    this.Positions.SequenceEqual(input.Positions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Keyword != null)
                    hashCode = hashCode * 59 + this.Keyword.GetHashCode();
                if (this.Negated != null)
                    hashCode = hashCode * 59 + this.Negated.GetHashCode();
                if (this.PartOfSpeech != null)
                    hashCode = hashCode * 59 + this.PartOfSpeech.GetHashCode();
                if (this.Significance != null)
                    hashCode = hashCode * 59 + this.Significance.GetHashCode();
                if (this.Support != null)
                    hashCode = hashCode * 59 + this.Support.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.Positions != null)
                    hashCode = hashCode * 59 + this.Positions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
