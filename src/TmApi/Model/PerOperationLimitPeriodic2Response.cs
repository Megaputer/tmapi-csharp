/* 
 * Megaputer Text Mining API
 *
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TmApi.Client.OpenAPIDateConverter;

namespace TmApi.Model
{
    /// <summary>
    /// PerOperationLimitPeriodic2Response
    /// </summary>
    [DataContract]
    public partial class PerOperationLimitPeriodic2Response :  IEquatable<PerOperationLimitPeriodic2Response>, IValidatableObject
    {
        /// <summary>
        /// A period when limitations apply
        /// </summary>
        /// <value>A period when limitations apply</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NTUPeriod2Enum
        {
            /// <summary>
            /// Enum Second for value: Second
            /// </summary>
            [EnumMember(Value = "Second")]
            Second = 1,

            /// <summary>
            /// Enum Minute for value: Minute
            /// </summary>
            [EnumMember(Value = "Minute")]
            Minute = 2,

            /// <summary>
            /// Enum Hour for value: Hour
            /// </summary>
            [EnumMember(Value = "Hour")]
            Hour = 3,

            /// <summary>
            /// Enum Day for value: Day
            /// </summary>
            [EnumMember(Value = "Day")]
            Day = 4,

            /// <summary>
            /// Enum Month for value: Month
            /// </summary>
            [EnumMember(Value = "Month")]
            Month = 5

        }

        /// <summary>
        /// A period when limitations apply
        /// </summary>
        /// <value>A period when limitations apply</value>
        [DataMember(Name="NTUPeriod2", EmitDefaultValue=false)]
        public NTUPeriod2Enum? NTUPeriod2 { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PerOperationLimitPeriodic2Response" /> class.
        /// </summary>
        /// <param name="nTUPeriod2">A period when limitations apply.</param>
        /// <param name="nTUInPeriod2Limit">A maximum number of requests in the specified period.</param>
        /// <param name="nTUInPeriod2Tokens">A number of requests that have already been processed for operation Text parsing.</param>
        /// <param name="nTUInPeriod2Keywords">A number of requests that have already been processed for operation Keywords extraction.</param>
        /// <param name="nTUInPeriod2Entities">A number of requests that have already been processed for operation Entities extraction.</param>
        /// <param name="nTUInPeriod2Languages">A number of requests that have already been processed for operation Language detection.</param>
        /// <param name="nTUInPeriod2Sentiments">A number of requests that have already been processed for operation Sentiments analysis.</param>
        /// <param name="nTUInPeriod2Facts">A number of requests that have already been processed for operation Facts extraction.</param>
        public PerOperationLimitPeriodic2Response(NTUPeriod2Enum? nTUPeriod2 = default(NTUPeriod2Enum?), int? nTUInPeriod2Limit = default(int?), int? nTUInPeriod2Tokens = default(int?), int? nTUInPeriod2Keywords = default(int?), int? nTUInPeriod2Entities = default(int?), int? nTUInPeriod2Languages = default(int?), int? nTUInPeriod2Sentiments = default(int?), int? nTUInPeriod2Facts = default(int?))
        {
            this.NTUPeriod2 = nTUPeriod2;
            this.NTUInPeriod2Limit = nTUInPeriod2Limit;
            this.NTUInPeriod2Tokens = nTUInPeriod2Tokens;
            this.NTUInPeriod2Keywords = nTUInPeriod2Keywords;
            this.NTUInPeriod2Entities = nTUInPeriod2Entities;
            this.NTUInPeriod2Languages = nTUInPeriod2Languages;
            this.NTUInPeriod2Sentiments = nTUInPeriod2Sentiments;
            this.NTUInPeriod2Facts = nTUInPeriod2Facts;
        }
        

        /// <summary>
        /// A maximum number of requests in the specified period
        /// </summary>
        /// <value>A maximum number of requests in the specified period</value>
        [DataMember(Name="NTUInPeriod2Limit", EmitDefaultValue=false)]
        public int? NTUInPeriod2Limit { get; set; }

        /// <summary>
        /// A number of requests that have already been processed for operation Text parsing
        /// </summary>
        /// <value>A number of requests that have already been processed for operation Text parsing</value>
        [DataMember(Name="NTUInPeriod2Tokens", EmitDefaultValue=false)]
        public int? NTUInPeriod2Tokens { get; set; }

        /// <summary>
        /// A number of requests that have already been processed for operation Keywords extraction
        /// </summary>
        /// <value>A number of requests that have already been processed for operation Keywords extraction</value>
        [DataMember(Name="NTUInPeriod2Keywords", EmitDefaultValue=false)]
        public int? NTUInPeriod2Keywords { get; set; }

        /// <summary>
        /// A number of requests that have already been processed for operation Entities extraction
        /// </summary>
        /// <value>A number of requests that have already been processed for operation Entities extraction</value>
        [DataMember(Name="NTUInPeriod2Entities", EmitDefaultValue=false)]
        public int? NTUInPeriod2Entities { get; set; }

        /// <summary>
        /// A number of requests that have already been processed for operation Language detection
        /// </summary>
        /// <value>A number of requests that have already been processed for operation Language detection</value>
        [DataMember(Name="NTUInPeriod2Languages", EmitDefaultValue=false)]
        public int? NTUInPeriod2Languages { get; set; }

        /// <summary>
        /// A number of requests that have already been processed for operation Sentiments analysis
        /// </summary>
        /// <value>A number of requests that have already been processed for operation Sentiments analysis</value>
        [DataMember(Name="NTUInPeriod2Sentiments", EmitDefaultValue=false)]
        public int? NTUInPeriod2Sentiments { get; set; }

        /// <summary>
        /// A number of requests that have already been processed for operation Facts extraction
        /// </summary>
        /// <value>A number of requests that have already been processed for operation Facts extraction</value>
        [DataMember(Name="NTUInPeriod2Facts", EmitDefaultValue=false)]
        public int? NTUInPeriod2Facts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerOperationLimitPeriodic2Response {\n");
            sb.Append("  NTUPeriod2: ").Append(NTUPeriod2).Append("\n");
            sb.Append("  NTUInPeriod2Limit: ").Append(NTUInPeriod2Limit).Append("\n");
            sb.Append("  NTUInPeriod2Tokens: ").Append(NTUInPeriod2Tokens).Append("\n");
            sb.Append("  NTUInPeriod2Keywords: ").Append(NTUInPeriod2Keywords).Append("\n");
            sb.Append("  NTUInPeriod2Entities: ").Append(NTUInPeriod2Entities).Append("\n");
            sb.Append("  NTUInPeriod2Languages: ").Append(NTUInPeriod2Languages).Append("\n");
            sb.Append("  NTUInPeriod2Sentiments: ").Append(NTUInPeriod2Sentiments).Append("\n");
            sb.Append("  NTUInPeriod2Facts: ").Append(NTUInPeriod2Facts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerOperationLimitPeriodic2Response);
        }

        /// <summary>
        /// Returns true if PerOperationLimitPeriodic2Response instances are equal
        /// </summary>
        /// <param name="input">Instance of PerOperationLimitPeriodic2Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerOperationLimitPeriodic2Response input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NTUPeriod2 == input.NTUPeriod2 ||
                    (this.NTUPeriod2 != null &&
                    this.NTUPeriod2.Equals(input.NTUPeriod2))
                ) && 
                (
                    this.NTUInPeriod2Limit == input.NTUInPeriod2Limit ||
                    (this.NTUInPeriod2Limit != null &&
                    this.NTUInPeriod2Limit.Equals(input.NTUInPeriod2Limit))
                ) && 
                (
                    this.NTUInPeriod2Tokens == input.NTUInPeriod2Tokens ||
                    (this.NTUInPeriod2Tokens != null &&
                    this.NTUInPeriod2Tokens.Equals(input.NTUInPeriod2Tokens))
                ) && 
                (
                    this.NTUInPeriod2Keywords == input.NTUInPeriod2Keywords ||
                    (this.NTUInPeriod2Keywords != null &&
                    this.NTUInPeriod2Keywords.Equals(input.NTUInPeriod2Keywords))
                ) && 
                (
                    this.NTUInPeriod2Entities == input.NTUInPeriod2Entities ||
                    (this.NTUInPeriod2Entities != null &&
                    this.NTUInPeriod2Entities.Equals(input.NTUInPeriod2Entities))
                ) && 
                (
                    this.NTUInPeriod2Languages == input.NTUInPeriod2Languages ||
                    (this.NTUInPeriod2Languages != null &&
                    this.NTUInPeriod2Languages.Equals(input.NTUInPeriod2Languages))
                ) && 
                (
                    this.NTUInPeriod2Sentiments == input.NTUInPeriod2Sentiments ||
                    (this.NTUInPeriod2Sentiments != null &&
                    this.NTUInPeriod2Sentiments.Equals(input.NTUInPeriod2Sentiments))
                ) && 
                (
                    this.NTUInPeriod2Facts == input.NTUInPeriod2Facts ||
                    (this.NTUInPeriod2Facts != null &&
                    this.NTUInPeriod2Facts.Equals(input.NTUInPeriod2Facts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NTUPeriod2 != null)
                    hashCode = hashCode * 59 + this.NTUPeriod2.GetHashCode();
                if (this.NTUInPeriod2Limit != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod2Limit.GetHashCode();
                if (this.NTUInPeriod2Tokens != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod2Tokens.GetHashCode();
                if (this.NTUInPeriod2Keywords != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod2Keywords.GetHashCode();
                if (this.NTUInPeriod2Entities != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod2Entities.GetHashCode();
                if (this.NTUInPeriod2Languages != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod2Languages.GetHashCode();
                if (this.NTUInPeriod2Sentiments != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod2Sentiments.GetHashCode();
                if (this.NTUInPeriod2Facts != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod2Facts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
