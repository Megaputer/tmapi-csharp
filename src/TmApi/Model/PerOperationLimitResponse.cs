/* 
 * Megaputer Text Mining API
 *
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TmApi.Client.OpenAPIDateConverter;
using static TmApi.Model.PerOperationLimitPeriodic1Response;
using static TmApi.Model.PerOperationLimitPeriodic2Response;

namespace TmApi.Model
{
    /// <summary>
    /// PerOperationLimitResponse
    /// </summary>
    [DataContract]
    public partial class PerOperationLimitResponse :  IEquatable<PerOperationLimitResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerOperationLimitResponse" /> class.
        /// </summary>
        public PerOperationLimitResponse(int? nTULimit = default(int?), int? nTUTokens = default(int?), int? nTUKeywords = default(int?), int? nTUEntities = default(int?), int? nTULanguages = default(int?), int? nTUSentiments = default(int?), int? nTUFacts = default(int?), NTUPeriod1Enum? nTUPeriod1 = default(NTUPeriod1Enum?), int? nTUInPeriod1Limit = default(int?), int? nTUInPeriod1Tokens = default(int?), int? nTUInPeriod1Keywords = default(int?), int? nTUInPeriod1Entities = default(int?), int? nTUInPeriod1Languages = default(int?), int? nTUInPeriod1Sentiments = default(int?), int? nTUInPeriod1Facts = default(int?), NTUPeriod2Enum? nTUPeriod2 = default(NTUPeriod2Enum?), int? nTUInPeriod2Limit = default(int?), int? nTUInPeriod2Tokens = default(int?), int? nTUInPeriod2Keywords = default(int?), int? nTUInPeriod2Entities = default(int?), int? nTUInPeriod2Languages = default(int?), int? nTUInPeriod2Sentiments = default(int?), int? nTUInPeriod2Facts = default(int?))
        {
        }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerOperationLimitResponse {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerOperationLimitResponse);
        }

        /// <summary>
        /// Returns true if PerOperationLimitResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PerOperationLimitResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerOperationLimitResponse input)
        {
            if (input == null)
                return false;

            return false;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
