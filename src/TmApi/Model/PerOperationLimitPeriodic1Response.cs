/* 
 * Megaputer Text Mining API
 *
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TmApi.Client.OpenAPIDateConverter;

namespace TmApi.Model
{
    /// <summary>
    /// PerOperationLimitPeriodic1Response
    /// </summary>
    [DataContract]
    public partial class PerOperationLimitPeriodic1Response :  IEquatable<PerOperationLimitPeriodic1Response>, IValidatableObject
    {
        /// <summary>
        /// A period when limitations apply
        /// </summary>
        /// <value>A period when limitations apply</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NTUPeriod1Enum
        {
            /// <summary>
            /// Enum Second for value: Second
            /// </summary>
            [EnumMember(Value = "Second")]
            Second = 1,

            /// <summary>
            /// Enum Minute for value: Minute
            /// </summary>
            [EnumMember(Value = "Minute")]
            Minute = 2,

            /// <summary>
            /// Enum Hour for value: Hour
            /// </summary>
            [EnumMember(Value = "Hour")]
            Hour = 3,

            /// <summary>
            /// Enum Day for value: Day
            /// </summary>
            [EnumMember(Value = "Day")]
            Day = 4,

            /// <summary>
            /// Enum Month for value: Month
            /// </summary>
            [EnumMember(Value = "Month")]
            Month = 5

        }

        /// <summary>
        /// A period when limitations apply
        /// </summary>
        /// <value>A period when limitations apply</value>
        [DataMember(Name="NTUPeriod1", EmitDefaultValue=false)]
        public NTUPeriod1Enum? NTUPeriod1 { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PerOperationLimitPeriodic1Response" /> class.
        /// </summary>
        /// <param name="nTUPeriod1">A period when limitations apply.</param>
        /// <param name="nTUInPeriod1Limit">A maximum number of requests in the specified period.</param>
        /// <param name="nTUInPeriod1Tokens">A number of requests that have already been processed for operation Text parsing.</param>
        /// <param name="nTUInPeriod1Keywords">A number of requests that have already been processed for operation Keywords extraction.</param>
        /// <param name="nTUInPeriod1Entities">A number of requests that have already been processed for operation Entities extraction.</param>
        /// <param name="nTUInPeriod1Languages">A number of requests that have already been processed for operation Language detection.</param>
        /// <param name="nTUInPeriod1Sentiments">A number of requests that have already been processed for operation Sentiments analysis.</param>
        /// <param name="nTUInPeriod1Facts">A number of requests that have already been processed for operation Facts extraction.</param>
        public PerOperationLimitPeriodic1Response(NTUPeriod1Enum? nTUPeriod1 = default(NTUPeriod1Enum?), int? nTUInPeriod1Limit = default(int?), int? nTUInPeriod1Tokens = default(int?), int? nTUInPeriod1Keywords = default(int?), int? nTUInPeriod1Entities = default(int?), int? nTUInPeriod1Languages = default(int?), int? nTUInPeriod1Sentiments = default(int?), int? nTUInPeriod1Facts = default(int?))
        {
            this.NTUPeriod1 = nTUPeriod1;
            this.NTUInPeriod1Limit = nTUInPeriod1Limit;
            this.NTUInPeriod1Tokens = nTUInPeriod1Tokens;
            this.NTUInPeriod1Keywords = nTUInPeriod1Keywords;
            this.NTUInPeriod1Entities = nTUInPeriod1Entities;
            this.NTUInPeriod1Languages = nTUInPeriod1Languages;
            this.NTUInPeriod1Sentiments = nTUInPeriod1Sentiments;
            this.NTUInPeriod1Facts = nTUInPeriod1Facts;
        }
        

        /// <summary>
        /// A maximum number of requests in the specified period
        /// </summary>
        /// <value>A maximum number of requests in the specified period</value>
        [DataMember(Name="NTUInPeriod1Limit", EmitDefaultValue=false)]
        public int? NTUInPeriod1Limit { get; set; }

        /// <summary>
        /// A number of requests that have already been processed for operation Text parsing
        /// </summary>
        /// <value>A number of requests that have already been processed for operation Text parsing</value>
        [DataMember(Name="NTUInPeriod1Tokens", EmitDefaultValue=false)]
        public int? NTUInPeriod1Tokens { get; set; }

        /// <summary>
        /// A number of requests that have already been processed for operation Keywords extraction
        /// </summary>
        /// <value>A number of requests that have already been processed for operation Keywords extraction</value>
        [DataMember(Name="NTUInPeriod1Keywords", EmitDefaultValue=false)]
        public int? NTUInPeriod1Keywords { get; set; }

        /// <summary>
        /// A number of requests that have already been processed for operation Entities extraction
        /// </summary>
        /// <value>A number of requests that have already been processed for operation Entities extraction</value>
        [DataMember(Name="NTUInPeriod1Entities", EmitDefaultValue=false)]
        public int? NTUInPeriod1Entities { get; set; }

        /// <summary>
        /// A number of requests that have already been processed for operation Language detection
        /// </summary>
        /// <value>A number of requests that have already been processed for operation Language detection</value>
        [DataMember(Name="NTUInPeriod1Languages", EmitDefaultValue=false)]
        public int? NTUInPeriod1Languages { get; set; }

        /// <summary>
        /// A number of requests that have already been processed for operation Sentiments analysis
        /// </summary>
        /// <value>A number of requests that have already been processed for operation Sentiments analysis</value>
        [DataMember(Name="NTUInPeriod1Sentiments", EmitDefaultValue=false)]
        public int? NTUInPeriod1Sentiments { get; set; }

        /// <summary>
        /// A number of requests that have already been processed for operation Facts extraction
        /// </summary>
        /// <value>A number of requests that have already been processed for operation Facts extraction</value>
        [DataMember(Name="NTUInPeriod1Facts", EmitDefaultValue=false)]
        public int? NTUInPeriod1Facts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerOperationLimitPeriodic1Response {\n");
            sb.Append("  NTUPeriod1: ").Append(NTUPeriod1).Append("\n");
            sb.Append("  NTUInPeriod1Limit: ").Append(NTUInPeriod1Limit).Append("\n");
            sb.Append("  NTUInPeriod1Tokens: ").Append(NTUInPeriod1Tokens).Append("\n");
            sb.Append("  NTUInPeriod1Keywords: ").Append(NTUInPeriod1Keywords).Append("\n");
            sb.Append("  NTUInPeriod1Entities: ").Append(NTUInPeriod1Entities).Append("\n");
            sb.Append("  NTUInPeriod1Languages: ").Append(NTUInPeriod1Languages).Append("\n");
            sb.Append("  NTUInPeriod1Sentiments: ").Append(NTUInPeriod1Sentiments).Append("\n");
            sb.Append("  NTUInPeriod1Facts: ").Append(NTUInPeriod1Facts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerOperationLimitPeriodic1Response);
        }

        /// <summary>
        /// Returns true if PerOperationLimitPeriodic1Response instances are equal
        /// </summary>
        /// <param name="input">Instance of PerOperationLimitPeriodic1Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerOperationLimitPeriodic1Response input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NTUPeriod1 == input.NTUPeriod1 ||
                    (this.NTUPeriod1 != null &&
                    this.NTUPeriod1.Equals(input.NTUPeriod1))
                ) && 
                (
                    this.NTUInPeriod1Limit == input.NTUInPeriod1Limit ||
                    (this.NTUInPeriod1Limit != null &&
                    this.NTUInPeriod1Limit.Equals(input.NTUInPeriod1Limit))
                ) && 
                (
                    this.NTUInPeriod1Tokens == input.NTUInPeriod1Tokens ||
                    (this.NTUInPeriod1Tokens != null &&
                    this.NTUInPeriod1Tokens.Equals(input.NTUInPeriod1Tokens))
                ) && 
                (
                    this.NTUInPeriod1Keywords == input.NTUInPeriod1Keywords ||
                    (this.NTUInPeriod1Keywords != null &&
                    this.NTUInPeriod1Keywords.Equals(input.NTUInPeriod1Keywords))
                ) && 
                (
                    this.NTUInPeriod1Entities == input.NTUInPeriod1Entities ||
                    (this.NTUInPeriod1Entities != null &&
                    this.NTUInPeriod1Entities.Equals(input.NTUInPeriod1Entities))
                ) && 
                (
                    this.NTUInPeriod1Languages == input.NTUInPeriod1Languages ||
                    (this.NTUInPeriod1Languages != null &&
                    this.NTUInPeriod1Languages.Equals(input.NTUInPeriod1Languages))
                ) && 
                (
                    this.NTUInPeriod1Sentiments == input.NTUInPeriod1Sentiments ||
                    (this.NTUInPeriod1Sentiments != null &&
                    this.NTUInPeriod1Sentiments.Equals(input.NTUInPeriod1Sentiments))
                ) && 
                (
                    this.NTUInPeriod1Facts == input.NTUInPeriod1Facts ||
                    (this.NTUInPeriod1Facts != null &&
                    this.NTUInPeriod1Facts.Equals(input.NTUInPeriod1Facts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NTUPeriod1 != null)
                    hashCode = hashCode * 59 + this.NTUPeriod1.GetHashCode();
                if (this.NTUInPeriod1Limit != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod1Limit.GetHashCode();
                if (this.NTUInPeriod1Tokens != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod1Tokens.GetHashCode();
                if (this.NTUInPeriod1Keywords != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod1Keywords.GetHashCode();
                if (this.NTUInPeriod1Entities != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod1Entities.GetHashCode();
                if (this.NTUInPeriod1Languages != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod1Languages.GetHashCode();
                if (this.NTUInPeriod1Sentiments != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod1Sentiments.GetHashCode();
                if (this.NTUInPeriod1Facts != null)
                    hashCode = hashCode * 59 + this.NTUInPeriod1Facts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
