/* 
 * Megaputer Text Mining API
 *
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TmApi.Client.OpenAPIDateConverter;

namespace TmApi.Model
{
    /// <summary>
    /// FactsResponseFacts
    /// </summary>
    [DataContract]
    public partial class FactsResponseFacts :  IEquatable<FactsResponseFacts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactsResponseFacts" /> class.
        /// </summary>
        /// <param name="type">Fact type.</param>
        /// <param name="attributes">Fact attributes. Depends on fact type.</param>
        /// <param name="positions">Fact positions in text.</param>
        public FactsResponseFacts(string type = default(string), Dictionary<string, Object> attributes = default(Dictionary<string, Object>), List<FactsResponsePositions> positions = default(List<FactsResponsePositions>))
        {
            this.Type = type;
            this.Attributes = attributes;
            this.Positions = positions;
        }
        
        /// <summary>
        /// Fact type
        /// </summary>
        /// <value>Fact type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Fact attributes. Depends on fact type
        /// </summary>
        /// <value>Fact attributes. Depends on fact type</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// Fact positions in text
        /// </summary>
        /// <value>Fact positions in text</value>
        [DataMember(Name="positions", EmitDefaultValue=false)]
        public List<FactsResponsePositions> Positions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FactsResponseFacts {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactsResponseFacts);
        }

        /// <summary>
        /// Returns true if FactsResponseFacts instances are equal
        /// </summary>
        /// <param name="input">Instance of FactsResponseFacts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactsResponseFacts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.Positions == input.Positions ||
                    this.Positions != null &&
                    this.Positions.SequenceEqual(input.Positions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Positions != null)
                    hashCode = hashCode * 59 + this.Positions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
