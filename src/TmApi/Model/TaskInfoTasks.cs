/* 
 * Megaputer Text Mining API
 *
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TmApi.Client.OpenAPIDateConverter;

namespace TmApi.Model
{
    /// <summary>
    /// TaskInfoTasks
    /// </summary>
    [DataContract]
    public partial class TaskInfoTasks :  IEquatable<TaskInfoTasks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskInfoTasks" /> class.
        /// </summary>
        /// <param name="id">An identifier of the task, which this element shows information about.</param>
        /// <param name="created">UTC time of the task creation (not starting time, since starting time may be delayed).</param>
        /// <param name="modified">UTC time when the task data were changed. Typically it is the time when the value in the done parameter were changed. If done&#x3D; 100, then modified stores the time when the task is completed .</param>
        /// <param name="lastAccessed">UTC time when the task execution results were last requested. Initially this value is the time of task creation (created).</param>
        /// <param name="done">Progress percentage of the task performance. When it is 100, then the task is completed. Check this parameter to find out if the task is completed or not .</param>
        /// <param name="error">A task execution error. If done &#x3D; 100 and this parameter is not empty, then the task has ended with an error and it cannot provide any results .</param>
        public TaskInfoTasks(string id = default(string), string created = default(string), string modified = default(string), string lastAccessed = default(string), int? done = default(int?), string error = default(string))
        {
            this.Id = id;
            this.Created = created;
            this.Modified = modified;
            this.LastAccessed = lastAccessed;
            this.Done = done;
            this.Error = error;
        }
        
        /// <summary>
        /// An identifier of the task, which this element shows information about
        /// </summary>
        /// <value>An identifier of the task, which this element shows information about</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// UTC time of the task creation (not starting time, since starting time may be delayed)
        /// </summary>
        /// <value>UTC time of the task creation (not starting time, since starting time may be delayed)</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// UTC time when the task data were changed. Typically it is the time when the value in the done parameter were changed. If done&#x3D; 100, then modified stores the time when the task is completed 
        /// </summary>
        /// <value>UTC time when the task data were changed. Typically it is the time when the value in the done parameter were changed. If done&#x3D; 100, then modified stores the time when the task is completed </value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public string Modified { get; set; }

        /// <summary>
        /// UTC time when the task execution results were last requested. Initially this value is the time of task creation (created)
        /// </summary>
        /// <value>UTC time when the task execution results were last requested. Initially this value is the time of task creation (created)</value>
        [DataMember(Name="lastAccessed", EmitDefaultValue=false)]
        public string LastAccessed { get; set; }

        /// <summary>
        /// Progress percentage of the task performance. When it is 100, then the task is completed. Check this parameter to find out if the task is completed or not 
        /// </summary>
        /// <value>Progress percentage of the task performance. When it is 100, then the task is completed. Check this parameter to find out if the task is completed or not </value>
        [DataMember(Name="done", EmitDefaultValue=false)]
        public int? Done { get; set; }

        /// <summary>
        /// A task execution error. If done &#x3D; 100 and this parameter is not empty, then the task has ended with an error and it cannot provide any results 
        /// </summary>
        /// <value>A task execution error. If done &#x3D; 100 and this parameter is not empty, then the task has ended with an error and it cannot provide any results </value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskInfoTasks {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  LastAccessed: ").Append(LastAccessed).Append("\n");
            sb.Append("  Done: ").Append(Done).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskInfoTasks);
        }

        /// <summary>
        /// Returns true if TaskInfoTasks instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskInfoTasks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskInfoTasks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.LastAccessed == input.LastAccessed ||
                    (this.LastAccessed != null &&
                    this.LastAccessed.Equals(input.LastAccessed))
                ) && 
                (
                    this.Done == input.Done ||
                    (this.Done != null &&
                    this.Done.Equals(input.Done))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.LastAccessed != null)
                    hashCode = hashCode * 59 + this.LastAccessed.GetHashCode();
                if (this.Done != null)
                    hashCode = hashCode * 59 + this.Done.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Done (int?) maximum
            if(this.Done > (int?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Done, must be a value less than or equal to 100.", new [] { "Done" });
            }

            // Done (int?) minimum
            if(this.Done < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Done, must be a value greater than or equal to 0.", new [] { "Done" });
            }

            yield break;
        }
    }

}
